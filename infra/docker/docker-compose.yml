version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: dataplatform-postgres
    environment:
      POSTGRES_DB: dataplatform
      POSTGRES_USER: datauser
      POSTGRES_PASSWORD: datapass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U datauser -d dataplatform"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dataplatform

  # API Service
  api-service:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.api
    container_name: dataplatform-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://datauser:datapass@postgres:5432/dataplatform
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dataplatform
    volumes:
      - ../../data:/app/data

  # Jupyter Lab
  jupyter:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.jupyter
    container_name: dataplatform-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ../../notebooks:/home/jovyan/work/notebooks
      - ../../data:/home/jovyan/work/data
    networks:
      - dataplatform

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: dataplatform-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dataplatform

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: dataplatform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - dataplatform

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dataplatform-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana_dashboards.json:/etc/grafana/provisioning/dashboards/dashboard.json
    depends_on:
      - prometheus
    networks:
      - dataplatform

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: dataplatform-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-service
      - grafana
      - jupyter
    networks:
      - dataplatform

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dataplatform:
    driver: bridge